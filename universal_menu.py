# -*- coding: utf-8 -*-
"""
Universal menu module accessible from any point in the bot
Provides quick access to: switch protocol, emotion diary, help and hotlines
"""

from telebot import types


def get_menu_button():
    """
    Returns inline keyboard markup with menu button
    Used to provide menu access from any point in the bot
    """
    markup = types.InlineKeyboardMarkup()
    btn_menu = types.InlineKeyboardButton(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="menu:show"
    )
    markup.add(btn_menu)
    return markup


def get_back_and_menu_buttons():
    """
    Returns inline keyboard markup with back and menu buttons
    Used in multi-step flows to provide navigation options
    """
    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="go_back"
    )
    btn_menu = types.InlineKeyboardButton(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="menu:show"
    )
    markup.row(btn_back, btn_menu)
    return markup


HELP_TEXT = (
    "–ú–Ω–µ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª(–∞) –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. üíõ\n"
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –∂–∏–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
    "üÜò –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –≥–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏:\n\n"
    "‚òéÔ∏è –ï–¥–∏–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –¥–µ—Ç–µ–π:\n"
    "8 (800) 100-49-94 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)\n\n"
    "‚òéÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫—Ä–∏–∑–∏—Å–Ω–∞—è –ª–∏–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è –ø–æ –†–æ—Å—Å–∏–∏:\n"
    "8 (800) 333-44-34\n\n"
    "‚òéÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫—Ä–∏–∑–∏—Å–Ω–∞—è –ª–∏–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è –ø–æ –ú–æ—Å–∫–≤–µ:\n"
    "8 (495) 988-44-34\n\n"
    "‚òéÔ∏è –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –¶–µ–Ω—Ç—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏ –ú–ß–° –†–æ—Å—Å–∏–∏:\n"
    "8 (495) 989-50-50\n"
    "psi.mchs.gov.ru\n\n"
    "‚òéÔ∏è –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ ¬´–ü—Ä–æ—Å—Ç–æ –ª—é–¥–∏¬ª:\n"
    "8 (495) 025-15-35\n\n"
    "‚òéÔ∏è –ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Å–ª—É–∂–±–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—é:\n"
    "051 —Å –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ\n"
    "8 (495) 051 —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ\n\n"
    "‚òéÔ∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–µ–¥–∏–∫–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã:\n"
    "8 (499) 791-20-50\n\n"
    "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üíô"
)


async def show_change_options(bot, chat_id, user_id, username):
    """
    Show options to change goal and/or problems
    Called from '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å/–ø—Ä–æ–±–ª–µ–º—ã' menu button
    """
    try:
        text = "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?"

        markup = types.InlineKeyboardMarkup()

        btn_goal = types.InlineKeyboardButton(
            "üéØ –¶–µ–ª—å —Ç–µ—Ä–∞–ø–∏–∏",
            callback_data="change:goal_only"
        )
        btn_problems = types.InlineKeyboardButton(
            "üß≠ –¢—Ä—É–¥–Ω–æ—Å—Ç–∏",
            callback_data="change:problems_only"
        )
        btn_back = types.InlineKeyboardButton(
            "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            callback_data="menu:show"
        )

        markup.add(btn_goal)
        markup.add(btn_problems)
        markup.add(btn_back)

        await bot.send_message(chat_id, text, reply_markup=markup)

    except Exception as e:
        print(f"Error showing change options: {e}")


async def show_main_menu(bot, chat_id, user_id, username, user_name, form_of_address='—Ç—ã'):
    """
    Display the universal main menu with all options

    Args:
        bot: Telegram bot instance
        chat_id: Chat ID
        user_id: User ID
        username: Username
        user_name: User's name
        form_of_address: Form of address ('—Ç—ã' or '–í—ã')
    """
    try:
        text = "üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

        markup = types.InlineKeyboardMarkup()

        # Select exercise button (based on user problems)
        btn_exercise = types.InlineKeyboardButton(
            "üß≠ –í—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
            callback_data="menu:select_exercise"
        )

        # Change goal/problems button
        btn_goal = types.InlineKeyboardButton(
            "üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å/–ø—Ä–æ–±–ª–µ–º—ã",
            callback_data="menu:set_goal"
        )

        # My progress button
        btn_progress = types.InlineKeyboardButton(
            "üìñ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
            callback_data="menu:my_progress"
        )

        # Mindfulness practice button
        btn_mindfulness = types.InlineKeyboardButton(
            "üåô –ú–∞–π–Ω–¥—Ñ—É–ª–Ω–µ—Å—Å-–ø—Ä–∞–∫—Ç–∏–∫–∞ (MBCT)",
            callback_data="menu:mindfulness"
        )

        # Emotion diary button
        btn_diary = types.InlineKeyboardButton(
            "üí¨ –î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π –∏ –º—ã—Å–ª–µ–π",
            callback_data="menu:diary"
        )

        # Assess progress button
        btn_assess = types.InlineKeyboardButton(
            "üìà –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
            callback_data="menu:assess_progress"
        )

        # Help and hotlines button
        btn_help = types.InlineKeyboardButton(
            "üÜò –ü–æ–º–æ—â—å –∏ –≥–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏",
            callback_data="menu:help"
        )

        # Technical support button
        btn_support = types.InlineKeyboardButton(
            "üöß –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É",
            callback_data="menu:technical_support"
        )

        markup.row(btn_exercise)
        markup.row(btn_goal)
        markup.row(btn_progress)
        markup.row(btn_mindfulness)
        markup.row(btn_diary)
        markup.row(btn_assess)
        markup.row(btn_help)
        markup.row(btn_support)

        await bot.send_message(chat_id, text, reply_markup=markup)

    except Exception as e:
        print(f"Error showing main menu: {e}")


async def handle_menu_callback(bot, callback_query, menu_action):
    """
    Handle menu button presses

    Args:
        bot: Telegram bot instance
        callback_query: Callback query from button press
        menu_action: Action selected (select_exercise, set_goal, diary, help, show, etc.)
    """
    try:
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or 'Unknown'
        chat_id = callback_query.message.chat.id

        await bot.answer_callback_query(callback_query.id)

        if menu_action == 'show':
            # Just show the menu when menu button is clicked
            from greeting import user_states

            # Clear exercise state if user was in the middle of an exercise
            from exercise import user_exercise_states
            if user_id in user_exercise_states:
                del user_exercise_states[user_id]

            user_name = '–î—Ä—É–≥'
            form_of_address = '—Ç—ã'
            if user_id in user_states and 'user_name' in user_states[user_id]:
                user_name = user_states[user_id]['user_name']
                form_of_address = user_states[user_id].get('form', '—Ç—ã')
            await show_main_menu(bot, chat_id, user_id, username, user_name, form_of_address)

        elif menu_action == 'select_exercise':
            # Check if user has problems defined
            from greeting import user_states
            from goal import user_goal_states

            # Check both states for existing problems
            user_problems = None
            problem_ratings = {}

            # First check persistent user_states
            if user_id in user_states:
                user_problems = user_states[user_id].get('problems')
                problem_ratings = user_states[user_id].get('problem_ratings', {})

            # If not found, check temporary goal states
            if not user_problems and user_id in user_goal_states:
                user_problems = user_goal_states[user_id].get('problems')
                problem_ratings = user_goal_states[user_id].get('problem_ratings', {})

            if user_problems:
                # User has problems - filter exercises by their problems
                from exercise import show_exercise_recommendations
                await show_exercise_recommendations(bot, chat_id, user_id, username, problem_ratings)
            else:
                # No problems defined - ask user to select problems only (not full goal setting)
                text = "–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –Ω–∞–¥ —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å."
                markup = types.InlineKeyboardMarkup()
                btn_back = types.InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    callback_data="menu:show"
                )
                markup.add(btn_back)
                await bot.send_message(chat_id, text, reply_markup=markup)

                # Start goal setting process
                from goal import start_goal_setting
                await start_goal_setting(bot, chat_id, user_id, username)

        elif menu_action == 'set_goal':
            # Show change options dialog
            await show_change_options(bot, chat_id, user_id, username)

        elif menu_action == 'my_progress':
            # Show user progress
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="menu:show"
            )
            markup.add(btn_back)

            progress_text = "üìñ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—Å–∫–æ—Ä–µ –¥–æ—Å—Ç—É–ø–Ω–∞."
            await bot.send_message(chat_id, progress_text, reply_markup=markup)

        elif menu_action == 'mindfulness':
            # Show mindfulness practice
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="menu:show"
            )
            markup.add(btn_back)

            mindfulness_text = "üåô –ú–∞–π–Ω–¥—Ñ—É–ª–Ω–µ—Å—Å-–ø—Ä–∞–∫—Ç–∏–∫–∞ (MBCT)\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—Å–∫–æ—Ä–µ –¥–æ—Å—Ç—É–ø–Ω–∞."
            await bot.send_message(chat_id, mindfulness_text, reply_markup=markup)

        elif menu_action == 'diary':
            # Import greeting to get user_name
            from greeting import user_states
            user_name = 'User'
            if user_id in user_states:
                user_name = user_states[user_id].get('user_name', 'User')

            # Import and call diary prompt
            from diary import show_diary_prompt
            await show_diary_prompt(bot, chat_id, user_id, username, user_name)

        elif menu_action == 'assess_progress':
            # Show assess progress
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="menu:show"
            )
            markup.add(btn_back)

            assess_text = "üìà –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—Å–∫–æ—Ä–µ –¥–æ—Å—Ç—É–ø–Ω–∞."
            await bot.send_message(chat_id, assess_text, reply_markup=markup)

        elif menu_action == 'technical_support':
            # Show technical support contact
            markup = types.InlineKeyboardMarkup()
            btn_contact = types.InlineKeyboardButton(
                "üë§ @zhuravlstrogo",
                url="https://t.me/zhuravlstrogo"
            )
            btn_back = types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="menu:show"
            )
            markup.add(btn_contact)
            markup.add(btn_back)

            support_text = "üöß –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n–°–≤—è–∂–∏—Å—å —Å –Ω–∞–º–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –Ω–∏–∂–µ:"
            await bot.send_message(chat_id, support_text, reply_markup=markup)

        elif menu_action == 'change_goal':
            # Start goal setting to change goal only
            from goal import start_goal_setting
            from greeting import user_states

            # Clear old goal to force asking for new one
            if user_id in user_states and 'goal' in user_states[user_id]:
                del user_states[user_id]['goal']

            await start_goal_setting(bot, chat_id, user_id, username, skip_goal=False)

        elif menu_action == 'change_problems':
            # Start goal setting to change problems only (skip goal)
            from goal import start_goal_setting
            await start_goal_setting(bot, chat_id, user_id, username, skip_goal=True)

        elif menu_action == 'change_all':
            # Start goal setting from beginning
            from goal import start_goal_setting
            from greeting import user_states

            # Clear all saved data
            if user_id in user_states:
                if 'goal' in user_states[user_id]:
                    del user_states[user_id]['goal']
                if 'problems' in user_states[user_id]:
                    del user_states[user_id]['problems']
                if 'problem_ratings' in user_states[user_id]:
                    del user_states[user_id]['problem_ratings']

            await start_goal_setting(bot, chat_id, user_id, username, skip_goal=False)

        elif menu_action == 'help':
            # Create markup with back to menu button
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="menu:show"
            )
            markup.add(btn_back)

            await bot.send_message(chat_id, HELP_TEXT, reply_markup=markup)

    except Exception as e:
        print(f"Error handling menu callback: {e}")
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã", show_alert=True)


async def handle_change_callback(bot, callback_query, action):
    """
    Handle change goal/problems callbacks

    Args:
        bot: Telegram bot instance
        callback_query: Callback query from button press
        action: Action type (goal_only or problems_only)
    """
    try:
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or 'Unknown'
        chat_id = callback_query.message.chat.id

        await bot.answer_callback_query(callback_query.id)

        if action == 'goal_only':
            # Change only goal - skip to step 1 with existing goal cleared
            from goal import start_goal_setting
            await start_goal_setting(bot, chat_id, user_id, username, skip_goal=False, force_change_goal=True)

        elif action == 'problems_only':
            # Change only problems - skip to problem selection (step 2)
            from goal import start_goal_setting
            await start_goal_setting(bot, chat_id, user_id, username, skip_goal=True, force_change_problems=True)

    except Exception as e:
        print(f"Error handling change callback: {e}")
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã", show_alert=True)


def register_menu_handlers(bot):
    """
    Register universal menu handlers

    Args:
        bot: Telegram bot instance
    """
    @bot.callback_query_handler(func=lambda call: call.data.startswith('menu:'))
    async def menu_callback_handler(callback_query):
        """Handle menu button clicks"""
        action = callback_query.data.split(':')[1]
        await handle_menu_callback(bot, callback_query, action)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('change:'))
    async def change_callback_handler(callback_query):
        """Handle change goal/problems buttons"""
        action = callback_query.data.split(':')[1]
        await handle_change_callback(bot, callback_query, action)
