# -*- coding: utf-8 -*-
"""
Safety and crisis detection module for therapy bot
Provides unified safety checks across all user inputs
"""

import json
import hashlib
from datetime import datetime, timedelta
from typing import Tuple, Optional, Dict, Any, List
from telebot import types
import os
from openpyxl import load_workbook

# Import LLM client for analysis
from openrouter import OpenRouterClient
from config import MODEL_SIMPLE, TEMPERATURE, TOP_P, TOP_K

# Cache for LLM responses to avoid repeated checks
safety_cache: Dict[str, Dict[str, Any]] = {}
CACHE_TTL_MINUTES = 30  # Shorter cache for safety checks

# Crisis keywords for quick detection (Russian)
CRISIS_KEYWORDS = [
    # Suicidal ideation
    '—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '–ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π', '–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å',
    '—É–º–µ—Ä–µ—Ç—å', '—É–±–∏—Ç—å —Å–µ–±—è', '–ø—Ä—ã–≥–Ω—É—Ç—å —Å', '–ø–æ–≤–µ—Å–∏—Ç—å—Å—è', '–æ—Ç—Ä–∞–≤–∏—Ç—å—Å—è',
    '–≤—Å–∫—Ä—ã—Ç—å –≤–µ–Ω—ã', '—Ç–∞–±–ª–µ—Ç–∫–∏ –≤—ã–ø–∏—Ç—å', '–Ω–µ—Ç —Å–º—ã—Å–ª–∞ –∂–∏—Ç—å',

    # Self-harm
    '–ø–æ—Ä–µ–∑–∞—Ç—å —Å–µ–±—è', '–ø—Ä–∏—á–∏–Ω–∏—Ç—å —Å–µ–±–µ –±–æ–ª—å', '–Ω–∞–∫–∞–∑–∞—Ç—å —Å–µ–±—è',
    '—Ä–µ–∑–∞—Ç—å —Ä—É–∫–∏', '–±–∏—Ç—å —Å–µ–±—è', '—Å–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ',

    # Psychosis indicators
    '–≥–æ–ª–æ—Å–∞ –≤ –≥–æ–ª–æ–≤–µ', '–ø—Ä–µ—Å–ª–µ–¥—É—é—Ç', '—Å–ª–µ–¥—è—Ç –∑–∞ –º–Ω–æ–π', '—á–∏—Ç–∞—é—Ç –º—ã—Å–ª–∏',
    '—É–ø—Ä–∞–≤–ª—è—é—Ç –º–Ω–æ–π', '–∑–∞–≥–æ–≤–æ—Ä –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è', '–≤—Å–µ –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è',

    # Severe dissociation
    '–Ω–µ —á—É–≤—Å—Ç–≤—É—é —Ç–µ–ª–æ', '—ç—Ç–æ –Ω–µ —è', '—Å–º–æ—Ç—Ä—é –Ω–∞ —Å–µ–±—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã',
    '–Ω–µ —Ä–µ–∞–ª—å–Ω–æ', '–≤—Å–µ –∫–∞–∫ –≤–æ —Å–Ω–µ', '–æ—Ç–∫–ª—é—á–∞—é—Å—å –æ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏',

    # Substance abuse crisis
    '–ø–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∞', '–Ω–µ –º–æ–≥—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è', '–ª–æ–º–∫–∞', '–∞–±—Å—Ç–∏–Ω–µ–Ω—Ü–∏—è',

    # Mania/extreme states
    '–Ω–µ —Å–ø–ª—é –Ω–µ–¥–µ–ª—é', '–º–æ–≥—É –≤—Å—ë', '—è –±–æ–≥', '–Ω–µ –Ω—É–∂–Ω–∞ –µ–¥–∞',
    '—ç–Ω–µ—Ä–≥–∏—è –±—å—ë—Ç –∫–ª—é—á–æ–º', '–Ω–µ –º–æ–≥—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è'
]

# Help resources text
HELP_TEXT = """
üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:**

**–ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏ (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ):**
‚Ä¢ 8-800-2000-122 - –î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è
‚Ä¢ 8-800-100-0191 - –ö—Ä–∏–∑–∏—Å–Ω–∞—è –ª–∏–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è
‚Ä¢ 051 - –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è (—Å –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ)

**–û–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ tvoyteritoriya.online - —á–∞—Ç —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
‚Ä¢ www.ya-roditel.ru - –ø–æ–º–æ—â—å —Ä–æ–¥–∏—Ç–µ–ª—è–º

**–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:**
‚Ä¢ 112 - –ï–¥–∏–Ω–∞—è —Å–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏
‚Ä¢ 103 - –°–∫–æ—Ä–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å

–ü–æ–º–Ω–∏: –∫—Ä–∏–∑–∏—Å –≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ø–æ–º–æ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞! üíô
"""


def get_cache_key(text: str, check_type: str) -> str:
    """Generate cache key for safety check results"""
    text_hash = hashlib.md5(text.encode()).hexdigest()[:8]
    return f"safety_{check_type}_{text_hash}"


def get_cached_result(cache_key: str) -> Optional[Tuple[bool, Optional[str]]]:
    """Get cached safety check result if still valid"""
    if cache_key in safety_cache:
        cached_data = safety_cache[cache_key]
        if datetime.now() - cached_data['timestamp'] < timedelta(minutes=CACHE_TTL_MINUTES):
            return cached_data['result']
    return None


def set_cached_result(cache_key: str, result: Tuple[bool, Optional[str]]) -> None:
    """Store safety check result in cache"""
    safety_cache[cache_key] = {
        'result': result,
        'timestamp': datetime.now()
    }


def quick_keyword_check(text: str) -> Tuple[bool, Optional[str]]:
    """
    Quick check for crisis keywords without LLM
    Returns: (crisis_detected, crisis_type)
    """
    text_lower = text.lower()

    # Check each keyword
    for keyword in CRISIS_KEYWORDS:
        if keyword in text_lower:
            # Determine crisis type
            if any(word in keyword for word in ['—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '–ø–æ–∫–æ–Ω—á–∏—Ç—å', '–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å', '—É–º–µ—Ä–µ—Ç—å', '—É–±–∏—Ç—å —Å–µ–±—è']):
                return True, "–°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏"
            elif any(word in keyword for word in ['–ø–æ—Ä–µ–∑–∞—Ç—å', '–ø—Ä–∏—á–∏–Ω–∏—Ç—å —Å–µ–±–µ –±–æ–ª—å', '—Ä–µ–∑–∞—Ç—å —Ä—É–∫–∏']):
                return True, "–°–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ"
            elif any(word in keyword for word in ['–≥–æ–ª–æ—Å–∞', '–ø—Ä–µ—Å–ª–µ–¥—É—é—Ç', '—Å–ª–µ–¥—è—Ç', '—á–∏—Ç–∞—é—Ç –º—ã—Å–ª–∏', '—É–ø—Ä–∞–≤–ª—è—é—Ç', '–∑–∞–≥–æ–≤–æ—Ä']):
                return True, "–ü—Å–∏—Ö–æ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã"
            elif any(word in keyword for word in ['–Ω–µ —á—É–≤—Å—Ç–≤—É—é —Ç–µ–ª–æ', '—ç—Ç–æ –Ω–µ —è', '–Ω–µ —Ä–µ–∞–ª—å–Ω–æ', '–∫–∞–∫ –≤–æ —Å–Ω–µ']):
                return True, "–î–∏—Å—Å–æ—Ü–∏–∞—Ü–∏—è"
            elif any(word in keyword for word in ['–ø–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∞', '–ª–æ–º–∫–∞', '–∞–±—Å—Ç–∏–Ω–µ–Ω—Ü–∏—è']):
                return True, "–ö—Ä–∏–∑–∏—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            elif any(word in keyword for word in ['–Ω–µ —Å–ø–ª—é –Ω–µ–¥–µ–ª—é', '—è –±–æ–≥', '—ç–Ω–µ—Ä–≥–∏—è –±—å—ë—Ç']):
                return True, "–ú–∞–Ω–∏–∞–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            else:
                return True, "–ö—Ä–∏–∑–∏—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"

    return False, None


async def check_text_safety(text: str, context: str = "general") -> Tuple[bool, Optional[str], float]:
    """
    Check text for crisis indicators using both keyword and LLM analysis

    Args:
        text: Text to analyze
        context: Context of the text (exercise, diary, checkin, etc.)

    Returns:
        (crisis_detected, crisis_type, confidence_score)
    """
    if not text or len(text.strip()) < 3:
        return False, None, 0.0

    # Check cache first
    cache_key = get_cache_key(text, context)
    cached = get_cached_result(cache_key)
    if cached:
        crisis_detected, crisis_type = cached
        return crisis_detected, crisis_type, 1.0 if crisis_detected else 0.0

    # Quick keyword check first
    keyword_crisis, keyword_type = quick_keyword_check(text)
    if keyword_crisis:
        set_cached_result(cache_key, (True, keyword_type))
        return True, keyword_type, 0.95

    # LLM analysis for more nuanced detection
    try:
        system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫—Ä–∏–∑–∏—Å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏):
1. –°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏/–Ω–∞–º–µ—Ä–µ–Ω–∏—è/–ø–ª–∞–Ω—ã
2. –°–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ (–ø–æ—Ä–µ–∑—ã, –æ–∂–æ–≥–∏, —É–¥–∞—Ä—ã)
3. –ü—Å–∏—Ö–æ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã (–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏, –±—Ä–µ–¥, –ø–∞—Ä–∞–Ω–æ–π—è)
4. –¢—è–∂—ë–ª–∞—è –¥–∏—Å—Å–æ—Ü–∏–∞—Ü–∏—è/–¥–µ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
5. –û—Å—Ç—Ä—ã–π –∫—Ä–∏–∑–∏—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
6. –ú–∞–Ω–∏–∞–∫–∞–ª—å–Ω—ã–µ/—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

–í–ê–ñ–ù–û:
- –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ —Å–∫—Ä—ã—Ç—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º (–±–µ–∑–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å, –æ—â—É—â–µ–Ω–∏–µ –ª–æ–≤—É—à–∫–∏)
- –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ –æ–ø—ã—Ç–∞ vs —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- –ò–∑–±–µ–≥–∞–π –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã –≤ –æ–±—â–µ–º

–û—Ç–≤–µ—Ç—å JSON:
{
  "crisis_detected": boolean,
  "crisis_type": "—Ç–∏–ø –∫—Ä–∏–∑–∏—Å–∞" –∏–ª–∏ null,
  "confidence": float (0.0-1.0),
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
}"""

        user_prompt = f"""–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{text}

–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""

        client = OpenRouterClient()
        response, _ = client.get_simple_response(
            system_prompt=system_prompt,
            user_prompt=user_prompt,
            model=MODEL_SIMPLE,
            temperature=0.1,  # Low temperature for consistency
            top_p=TOP_P,
            top_k=TOP_K
        )

        # Parse JSON response
        result = json.loads(response.strip())

        crisis_detected = result.get('crisis_detected', False)
        crisis_type = result.get('crisis_type')
        confidence = result.get('confidence', 0.0)

        # Only flag crisis if confidence is high enough
        if crisis_detected and confidence >= 0.7:
            set_cached_result(cache_key, (True, crisis_type))
            return True, crisis_type, confidence
        else:
            set_cached_result(cache_key, (False, None))
            return False, None, confidence

    except Exception as e:
        print(f"Error in LLM safety check: {e}")
        # On error, rely on keyword check only
        return keyword_crisis, keyword_type, 0.5 if keyword_crisis else 0.0


async def show_crisis_support(bot, chat_id: int, user_name: str, crisis_type: str,
                              context: str = "general", continue_after: bool = False):
    """
    Show crisis support message and resources

    Args:
        bot: Telegram bot instance
        chat_id: Chat ID to send message to
        user_name: User's name for personalization
        crisis_type: Type of crisis detected
        context: Where crisis was detected (exercise, diary, etc.)
        continue_after: Whether to allow continuing after showing support
    """
    try:
        # Ensure user_name is not empty or default
        if not user_name or user_name == "User" or user_name == "–î—Ä—É–≥":
            user_name = "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥"

        # Personalized message based on crisis type
        intro_messages = {
            "–°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏": f"{user_name}, —è –æ—á–µ–Ω—å –±–µ—Å–ø–æ–∫–æ—é—Å—å –∑–∞ —Ç–µ–±—è. –≠—Ç–∏ –º—ã—Å–ª–∏ - —Å–∏–≥–Ω–∞–ª –æ —Å–∏–ª—å–Ω–æ–π –±–æ–ª–∏.",
            "–°–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ": f"{user_name}, —è –≤–∏–∂—É, —á—Ç–æ —Ç–µ–±–µ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ. –ë–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —Ä–µ–∞–ª—å–Ω–∞.",
            "–ü—Å–∏—Ö–æ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã": f"{user_name}, —Ç–æ, —á—Ç–æ —Ç—ã –æ–ø–∏—Å—ã–≤–∞–µ—à—å, —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            "–î–∏—Å—Å–æ—Ü–∏–∞—Ü–∏—è": f"{user_name}, –æ—â—É—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –ø—É–≥–∞—é—â–∏–º.",
            "–ö—Ä–∏–∑–∏—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏": f"{user_name}, –±–æ—Ä—å–±–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏.",
            "–ú–∞–Ω–∏–∞–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ": f"{user_name}, –≤–∞–∂–Ω–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
            "–ö—Ä–∏–∑–∏—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ": f"{user_name}, —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å —Ç—Ä—É–¥–Ω–æ."
        }

        intro = intro_messages.get(crisis_type, f"{user_name}, —è –ø–µ—Ä–µ–∂–∏–≤–∞—é –∑–∞ —Ç–µ–±—è.")

        text = (
            f"{intro}\n\n"
            f"–°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É. "
            f"–¢—ã –Ω–µ –æ–¥–∏–Ω/–æ–¥–Ω–∞ –≤ —ç—Ç–æ–º.\n\n"
            f"{HELP_TEXT}"
        )

        # Create buttons
        markup = types.InlineKeyboardMarkup()

        # Emergency help button
        btn_help = types.InlineKeyboardButton(
            "üÜò –ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏",
            callback_data="safety:hotlines"
        )

        markup.add(btn_help)

        # Add continue option if allowed
        if continue_after:
            btn_continue = types.InlineKeyboardButton(
                "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ",
                callback_data=f"safety:continue_{context}"
            )
            markup.add(btn_continue)

        # Always add main menu button
        btn_menu = types.InlineKeyboardButton(
            "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="menu:show"
        )
        markup.add(btn_menu)

        await bot.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')

    except Exception as e:
        print(f"Error showing crisis support: {e}")




async def log_crisis_detection(user_id: int, username: str, crisis_type: str,
                               context: str, text_sample: str, file_path: str = None):
    """
    Log crisis detection to appropriate Excel file

    Args:
        user_id: User's Telegram ID
        username: User's username
        crisis_type: Type of crisis detected
        context: Where detected (exercise, diary, checkin)
        text_sample: Sample of text that triggered detection
        file_path: Excel file to log to (optional)
    """
    try:
        # Determine file based on context if not provided
        if not file_path:
            file_map = {
                'exercise': 'exercises.xlsx',
                'diary': 'diary.xlsx',
                'checkin': 'check_in.xlsx',
                'mvst': 'mvst.xlsx'
            }
            file_path = file_map.get(context, 'safety_log.xlsx')

        # Create safety log if needed
        if file_path == 'safety_log.xlsx' and not os.path.exists(file_path):
            from openpyxl import Workbook
            wb = Workbook()
            ws = wb.active
            ws.title = 'Safety Log'

            headers = [
                'User ID', 'Username', 'Detection Time', 'Crisis Type',
                'Context', 'Text Sample', 'Action Taken'
            ]
            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)
            wb.save(file_path)

        # Log to file
        if os.path.exists(file_path):
            wb = load_workbook(file_path)

            # Find or create safety sheet
            if 'Safety' in wb.sheetnames:
                ws = wb['Safety']
            else:
                ws = wb.create_sheet('Safety')
                # Add headers if new sheet
                headers = [
                    'User ID', 'Username', 'Detection Time', 'Crisis Type',
                    'Context', 'Text Sample'
                ]
                for col, header in enumerate(headers, 1):
                    ws.cell(row=1, column=col, value=header)

            # Add crisis record
            next_row = ws.max_row + 1
            ws.cell(row=next_row, column=1, value=user_id)
            ws.cell(row=next_row, column=2, value=username)
            ws.cell(row=next_row, column=3, value=datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            ws.cell(row=next_row, column=4, value=crisis_type)
            ws.cell(row=next_row, column=5, value=context)
            ws.cell(row=next_row, column=6, value=text_sample[:200])  # Limit sample length

            wb.save(file_path)
            print(f"Logged crisis detection for user {user_id} in {file_path}")

    except Exception as e:
        print(f"Error logging crisis detection: {e}")


def register_safety_handlers(bot):
    """Register safety-related callback handlers"""

    @bot.callback_query_handler(func=lambda call: call.data.startswith('safety:'))
    async def safety_callback_handler(callback_query):
        """Handle safety-related callbacks"""
        try:
            data = callback_query.data.replace('safety:', '')
            chat_id = callback_query.message.chat.id

            # Answer callback immediately
            await bot.answer_callback_query(callback_query.id, show_alert=False)

            if data == 'hotlines':
                # Show hotlines again with emphasis
                text = (
                    "üìû **–ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏ –ø–æ–º–æ—â–∏:**\n\n"
                    "**–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ:**\n"
                    "‚òéÔ∏è **8-800-2000-122** - –î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è\n"
                    "‚òéÔ∏è **8-800-100-0191** - –ö—Ä–∏–∑–∏—Å–Ω–∞—è –ª–∏–Ω–∏—è\n"
                    "‚òéÔ∏è **051** - –° –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                    "**–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ:**\n"
                    "üö® **112** - –ï–¥–∏–Ω–∞—è —Å–ª—É–∂–±–∞\n"
                    "üöë **103** - –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å\n\n"
                    "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é. "
                    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è. üíô"
                )

                markup = types.InlineKeyboardMarkup()
                btn_menu = types.InlineKeyboardButton(
                    "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="menu:show"
                )
                markup.add(btn_menu)

                await bot.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')


            elif data.startswith('continue_'):
                # Continue with previous activity
                context = data.replace('continue_', '')

                text = (
                    "–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n"
                    "–ï—Å–ª–∏ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å —É—Ö—É–¥—à–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–π –≥–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏."
                )

                markup = types.InlineKeyboardMarkup()
                
                # Add context-specific continue buttons
                if context == "goal_setting":
                    btn_continue = types.InlineKeyboardButton(
                        "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–ª–∏",
                        callback_data="goal_continue:after_safety"
                    )
                    markup.add(btn_continue)
                elif context == "exercise":
                    btn_continue = types.InlineKeyboardButton(
                        "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
                        callback_data="exercise_continue:after_safety"
                    )
                    markup.add(btn_continue)
                
                btn_menu = types.InlineKeyboardButton(
                    "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="menu:show"
                )
                markup.add(btn_menu)

                await bot.send_message(chat_id, text, reply_markup=markup)

        except Exception as e:
            print(f"Error handling safety callback: {e}")
            await bot.answer_callback_query(callback_query.id)


# Export public interface
__all__ = [
    'check_text_safety',
    'show_crisis_support',
    'log_crisis_detection',
    'register_safety_handlers',
    'HELP_TEXT'
]